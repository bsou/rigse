h1. rigse

h2. prerequisites

Working git, ruby or jruby, rubgems, mysql.

h2. Initial install:

New setup scripts tested with trunk jruby, you will need a running mysql
server and a mysql username/password with enough permissions to create and drop databases.

<pre>
  <code>
    # If you are a committer in this repo:

    git clone git@github.com:stepheneb/rigse.git

    # otherwise:

    git clone git://github.com/stepheneb/rigse.git

    cd rigse2

    # follow instructions for installing necessary gem prerequisites
    # until config/setup.rb completes successfully
    jruby -S config/setup.rb

    # finish installing necessary gems for rails application
    jruby -S rake gems:install

    # setup database and application settings
    jruby -S rake rigse:setup:new_rigse_from_scratch

    # start server
    jruby script/server
  </code>
</pre>

h2. Some video walk-throughs

* "The Page Elements Model Part I":http://screencast.com/t/8M2ISjcM
* "Page Elements Model Part II":http://screencast.com/t/YyqOHfItL
* "HAML, Compass and SASS":http://screencast.com/t/68yJOeCRcN
* "PageElement View partials":http://screencast.com/t/800TVxOC
* "HAML, Compass and SASS":http://screencast.com/t/68yJOeCRcN
* "Javascript use in Rites":http://screencast.com/t/z7Vkt32iTp


---

h3. The Page Elements Model Part I: 

screencast: "The Page Elements Model Part I":http://screencast.com/t/8M2ISjcM

Install github version of railroad with aasm patches from "ddolar's repo":http://github.com/ddollar/railroad/tree/master

Generate a graph of the projects models using railroad:

<code> railroad -o models.dot -M </code> 

Open that file (models.dot) with omnigraffle, or traslate to some other image format using the dot tool.


---

h3. Page Elements Model Part II:

screencast: "Page Elements Model Part II":http://screencast.com/t/YyqOHfItL

Using mysql query browser (part of the osx mysql binary distrobution) to view schema:
"Mysql gui-tools":http://dev.mysql.com/get/Downloads/MySQLGUITools/mysql-gui-tools-5.0-r12-osx10.4-universal.dmg/from/pick

Use the generator to generate page elements eg:

<code> ./script/generate element xhtml content:text </code> 

---

h3. PageElement View partials:

screencast: "PageElement View partials":http://screencast.com/t/800TVxOC

Shows the relationship between:
* pages/show.html.haml
* pages/element_container.html.haml 
* shared/_embeddable_container.html.haml
* <embeddable_type>/_show.html.haml

---

h3. HAML, Compass and SASS:

screencast: "HAML, Compass and SASS":http://screencast.com/t/68yJOeCRcN

Brief introduction to the technologies generally, and how we use them specifically

* "HAML & SASS":http://haml.hamptoncatlin.com/
* "Compass: http":http//compass-style.org/
* "BluePrint: http":http//www.blueprintcss.org/

---

h3. Javascript use in Rites

screencast: "Javascript use in Rites":http://screencast.com/t/z7Vkt32iTp

What javascript librararies we are using, and what things we have written by ourselves;
Stuff we did:
* accordion view
* drop-downs
Other libraries
* "prototype":http://www.prototypejs.org/
* "scriptaculous":http://script.aculo.us/
* "tinymce":http://tinymce.moxiecode.com/
* "flotr":http://solutoire.com/flotr/


gured server is the 'staging' server (in config/deploy/staging.rb )

h2. Capistrano Recipies (and problems)

+warning+: sometimes the permissions on the shared/cache/.git directory get changed to be read-only for the group. So what i do to fix this is:
<code> sudo chmod -R g+w ./cached-copy/ </code>

There are a few database oriented recipes which should cover the basic db-oriented tasks you might want to do. Here are some scenarios and how to do them. Remember, all commands are entered on your local machine, in the application root directory.

There are 4 basic commands:
* <code>rake db:dump</code>
** This dumps the current environment's database to db/... eg db/production_data.sql or db/development_data.sql
* <code>rake db:load</code>
** This overwrites your current db with a sql dump from db/ into the current environment's db, provided a dump exists for your current environment
* <code>cap (production|staging|development) db:fetch_remote_db</code>
** The same as db:dump, except it dumps the database from whichever remote instance you chose
* <code>cap (staging|development) db:push_remote_db</code>
** Same as db:load, except the remote database is overwritten

*Download the production database to use locally*
* <code>cap production db:fetch_remote_db</code>
* <code>cp db/production_data.sql db/development_data.sql</code>
* <code>rake db:load</code>

*Reset the Staging or Development database with Production's version*
* <code>cap production db:fetch_remote_db</code>
* <code>cap staging db:push_remote_db</code>   or   <code>cap development db:push_remote_db</code>

*Update Staging or Development with a copy of your local database*
* <code>rake db:dump</code>
* <code>cap staging db:push_remote_db</code>   or   <code>cap development db:push_remote_db</code>

*Note*: For safety, you can't push a database to production. If you accidentally try, you'll get a message saying you can't do that.

There are three custom deployment-oriented cap tasks defined in config/deploy.rb  One works, One sometimes works, and the first one *doesn't!*
* cap deploy:from_scratch does not work. 
** It would need to be able to let users answer questions.
** Instead of dropping the database, we would have to simply drop tables. (rails user does not have perms to drop dbs)
* cap deploy:install_gems does seem to work, unless there are dependancies on the gem being installed.
* cap deploy:shared_symlinks does work, and it links in the shared resources that we use. (like config/database.yml)

Workarounds for cap deploy:from_scratch:  I usually just end up logging in to otto, dropping all the tables, 
and then running the various rake tasks by hand:

<code><pre>
rake db:migrate
rake rigse:setup:default_users_roles
rake rigse:setup:create_additional_users
rake rigse:setup:import_gses_from_file
</pre></code>

We should solve this one sooner rather than later.

h2. Updating the RITES staging server.

Once the master branch has been deployed to the dev site, tested
and found reliable enough to deploy to staging here's how to do it.

If you don't already have a local branch of staging

<code>
  git branch --track staging origin/staging
</code>

Switch to the staging branch and merge from master

<code><pre>
  git co staging
  git merge master
</pre></code>

Push your copy of staging to the gihub repository:

<code>
  git push origin staging
</code>

Deploy the new code to the staging server:

<code>
  cap staging deploy
</code>

If there are migrations that need to be run

<code>
  cap staging deploy:migrate
</code>

If the ITSI importers have been updated and you want to run them again:

<code><pre>
  cap staging import:erase_and_import_itsi_activities
  cap staging import:erase_and_import_ccp_itsi_units
</pre></code>

Until the production site is updated with the code that implements Investigation 
containers you will also need to run this task also:

<code>
  cap staging convert:wrap_orphaned_activities_in_investigations
</code>

Test the staging server:http://rites-investigations.staging.concord.org/

If the authors confirm that there are no blockers then let people know when the
update will take place and perform these tasks on the production server.
h2. other Rake tasks:

* rigse:make:investigations. This task simply finds all activities with no parent investigation, 
and creates a new investigation for that activity. The created investigation has the same name and description as the activity it contains.

h1. haml

we use haml for some templates
see: http://haml.hamptoncatlin.com/

to install this plugin we followed this procedure:
# <code>gem install --no-ri haml</code> 
# <code>haml --rails path/to/rigse_app</code>

!http://clients.fudgestudios.com/chester.jpg!


h2. notes for collaborating developers

# I could not figure out how to get rspec to work, and I did not feel like installing shoulda, so for now I am using basic unit tests
# This project was derived from BORT, which is basically like an archetype. Other notes in this document are taken from the Bort docs.
# 

h2. TODO Items:

# make models for
## activities (done)
## xhtml text areas [Xhtml]
## Open Responses [OpenResponse]
## Multiple Choice Questions [MultipleChoiceQuestion]
## Datacollectors: sensors and prediction [DataCollector]
## Models [InteractiveModel]

h3. RESTful Authentication

RESTful Authentication is already setup. The routes are setup, along with the mailers and observers.
Forgotten password comes setup, so you don't have to mess around setting it up with every project.

The AASM plugin comes pre-installed. RESTful Authentication is also setup to use user activation.

h3. User Roles

Bort now comes with "Role Requirement":http://code.google.com/p/rolerequirement/ by Tim Harper. A default 
admin role is predefined along with a default admin user. See the migrations for the admin login details.

h3. Open ID Authentication

Bort, as of 0.3, has Open ID integrated with RESTful Authentication. Rejoice!

_However I've (stepheneb) removed this to make debugging the authentication simnpler and it 
seems as though open-id is not becoming widespread._

h3. Will Paginate

We use will_paginate in pretty much every project we use.

h3. Rspec & Rspec-rails

You should be testing your code, so Bort comes with Rspec and Rspec-rails already installed so you're
ready to roll.

h3. Exception Notifier

You don't want your applications to crash and burn so Exception Notifier is already installed to let 
you know when everything goes to shit.

h3. Asset Packager

Packages up your css/javascript so you're not sending 143 files down to the user at the same time. Reduces
load times and saves you bandwidth.

h2. Routes


h2. Settings YAML

There is a settings.yml file that contains site-wide stuff. The site name, url and admin email are all used
in the RESTful Auth mailers, so you don't need to worry about editing them.

h2. Database YAML

The database.yml defaults to sqlite3 but also contains the settings for MySQL in comments so you can switch
over easily.

h2. Capistrano Recipe

Bort comes ready to rock capistrano. The recipe that is setup is based on using git and passenger. It's ready
to go with multistage deployments. It deploys to the production config by default, so if you don't need it
you can ignore it. Just update config/deploy/production.rb with your deployment settings.

More info on capistrano-ext/multistage deployments can be found here: http://weblog.jamisbuck.org/2007/7/23/capistrano-multistage

h2. Uses the Database for Sessions

Bort is setup to use the database to store sessions by default. 

h2. Misc 

* password and password_confirmation are set up to be filtered
* there is a default application layout file
* a page title helper has been added
* index.html is already deleted
* rails.png is already deleted
* a few changes have been made to the default views
* a default css file with blank selectors for common rails elements

h2. Credits

Bort put together by people at "Fudge":http://www.fudgestudios.com/ 
