h1. RITES Investigations Portal and Authoring System

h2. prerequisites

Working git, ruby or jruby, rubgems.

h2. Initial install:

New setup scripts tested with trunk jruby, you will need a running mysql
server and a mysql username/password with enough permissions to create and drop databases.

<pre>
  <code>
    # If you are a committer in this repo:

    git clone git@github.com:stepheneb/rigse.git

    # otherwise:

    git clone git://github.com/stepheneb/rigse.git

    cd rigse

    # follow instructions for installing necessary gem prerequisites
    # until config/setup.rb completes successfully
    jruby -S config/setup.rb

    # finish installing necessary gems for rails application
    jruby -S rake gems:install

    # setup database and application settings
    RAILS_ENV=production jruby -S rake rigse:setup:new_rigse_from_scratch

    # start server
    jruby script/server
  </code>
</pre>


h3. Here are some bugs with setup from scratch:

Setup from scatch no longer works. Here are some things that need to be fixed before the setup task can be run:
# Admin::Project.create_or_update__default_project_from_settings_yml is run in rites.rb (a rails iniitializer) it fails. (commented out)
# in data_collector.rb DISTANCE_PROBE_TYPE = ProbeType.find_by_name('Distance') must be commented out before migrations are run.
# rigse:setup:assign_vernier_golink_to_users task no longer exists (it is called from rigse:setup:new_rigse_from_scratch ) (commented out)
# ActiveRecord::ActiveRecordError: Unknown column 'portal_students.grade_id' in 'where clause': SELECT * FROM `portal_students` ...
# ( :grade_level_id => grade_9.id in default_users_roles_and_portal_resources.rake)
# NPE in NoMethodError nil.maven_jnlp_server in app/models/jnlp_adaptor.rb:6:in `initialize' (because dev database was not created when following above instructions)
# NOTE: the tasks in

h3. when deploying to a new server

# create required directories on your server eg:
## /web/production/APP_NAME/shared/log 
## /web/production/APP_NAME/shared/config
## /web/production/APP_NAME/shared/initializers
## /web/production/APP_NAME/releases
# put configuration files in /web/production/APP_NAME/shared/config
## at a minimum you need database.yml and initializers/site_key.rb
# modify the deploy recipies (in your local config/deploy.rb and config/deploy)
# deploy cap deploy ( it will fail, but it will get far enough to make some of the other things below possible)
# run ruby config/setup.rb on the server
# comment out the one line in config/initializers/rites.rb
# make sure config/nces_data isn't there
# run RAILS_ENV=production rake rigse:setup:new_rites_app


_there's a bunch more that needs to go here_

h2. Updating after pulling the commits on July 20 that merged the with-portal branch

<pre>
  <code>
    # finish setting up production sds portal realm 
    # http://saildataservice.concord.org/26
    # jnlp: http://saildataservice.concord.org/26/jnlp/490
    # curnit: http://saildataservice.concord.org/26/curnit/640
    # offering for default_offering: http://saildataservice.concord.org/26/offering/9331
    # sail_user for defaul user: http://saildataservice.concord.org/26/sail_user/37595
    # default workgroup for default offering and default sail user:
    # http://saildataservice.concord.org/26/workgroup/68284

    # on server:
    create shared/config/sds.yml using the form in sds.sample.yml with the values from the sds portal realm
    sudo gem install has_many_polymorphs haml
    cd shared
    mkdir -p engines/portal/config/nces_data
    # update settings.yml with new parameters in settings.sample.yml
    # on real staging and production sites enable_default_users should be false

    # on remote
    cap production db:fetch_remote_db
    cap deploy
    cap deploy:install_gems
    cap db:push_remote_db
    cap deploy:migrate
    cap import:download_nces_data
    cap import:nces_data_from_files

    # on server
    rake rigse:setup:default_users_roles --trace

    # on remotes
    cap import:generate_names_for_maven_jnlp_servers
    cap convert:transfer_investigations_owned_by_anonymous
    cap convert:deep_set_user_on_all_investigations
    cap convert:add_author_role_to_authors
    cap convert:set_publication_status_to_draft

    cap deploy:restart
  </code>
</pre>



h3. Setting up a local SAIL Data Service and JNLP Web Start servelet

You can also setup both a local SDS and jnlp web start server for a development environment with less dependence on outside services.

*"Setup a Full SAIL Stack on Mac OS 10.5":https://confluence.concord.org/display/CSP/Setup+a+Full+SAIL+Stack+on+MacOS+10.5*

has several sections with useful information:

# "Install Sail Data Service":https://confluence.concord.org/display/CSP/Setup+a+Full+SAIL+Stack+on+MacOS+10.5#SetupaFullSAILStackonMacOS10.5-5InstallSailDataService
# "Install Jnlp Servlet and build associated WAR file with jnlp and jars":https://confluence.concord.org/display/CSP/Setup+a+Full+SAIL+Stack+on+MacOS+10.5#SetupaFullSAILStackonMacOS10.5-4InstallJnlpServletandbuildassociatedWARfilewithjnlpandjars

h2. Some video walk-throughs

* "The Page Elements Model Part I":http://screencast.com/t/8M2ISjcM
* "Page Elements Model Part II":http://screencast.com/t/YyqOHfItL
* "HAML, Compass and SASS":http://screencast.com/t/68yJOeCRcN
* "PageElement View partials":http://screencast.com/t/800TVxOC
* "HAML, Compass and SASS":http://screencast.com/t/68yJOeCRcN
* "Javascript use in Rites":http://screencast.com/t/z7Vkt32iTp


---

h3. The Page Elements Model Part I: 

screencast: "The Page Elements Model Part I":http://screencast.com/t/8M2ISjcM

Install github version of railroad with aasm patches from "ddolar's repo":http://github.com/ddollar/railroad/tree/master

Generate a graph of the projects models using railroad:

<code> railroad -o models.dot -M </code> 

Open that file (models.dot) with omnigraffle, or traslate to some other image format using the dot tool.


---

h3. Page Elements Model Part II:

screencast: "Page Elements Model Part II":http://screencast.com/t/YyqOHfItL

Using mysql query browser (part of the osx mysql binary distrobution) to view schema:
"Mysql gui-tools":http://dev.mysql.com/get/Downloads/MySQLGUITools/mysql-gui-tools-5.0-r12-osx10.4-universal.dmg/from/pick

Use the generator to generate page elements eg:

<code> ./script/generate element xhtml content:text </code> 

---

h3. PageElement View partials:

screencast: "PageElement View partials":http://screencast.com/t/800TVxOC

Shows the relationship between:
* pages/show.html.haml
* pages/element_container.html.haml 
* shared/_embeddable_container.html.haml
* <embeddable_type>/_show.html.haml

---

h3. HAML, Compass and SASS:

screencast: "HAML, Compass and SASS":http://screencast.com/t/68yJOeCRcN

Brief introduction to the technologies generally, and how we use them specifically

* "HAML & SASS":http://haml.hamptoncatlin.com/
* "Compass: http":http//compass-style.org/
* "BluePrint: http":http//www.blueprintcss.org/

---

h3. Javascript use in Rites

screencast: "Javascript use in Rites":http://screencast.com/t/z7Vkt32iTp

What javascript librararies we are using, and what things we have written by ourselves;
Stuff we did:
* accordion view
* drop-downs
Other libraries
* "prototype":http://www.prototypejs.org/
* "scriptaculous":http://script.aculo.us/
* "tinymce":http://tinymce.moxiecode.com/
* "flotr":http://solutoire.com/flotr/


gured server is the 'staging' server (in config/deploy/staging.rb )

h2. Capistrano Recipies (and problems)

+warning+: sometimes the permissions on the shared/cache/.git directory get changed to be read-only for the group. So what i do to fix this is:
<code> sudo chmod -R g+w ./cached-copy/ </code>

h3. Database recipes

There are a few database oriented recipes which should cover the basic db-oriented tasks you might want to do. 
Here are some scenarios and how to do them. Remember, all commands are entered on your local machine, in the application root directory.

There are 4 basic commands:
* <code>rake db:dump</code>
** This dumps the current environment's database to db/... eg db/production_data.sql or db/development_data.sql
* <code>rake db:load</code>
** This overwrites your current db with a sql dump from db/ into the current environment's db, provided a dump exists for your current environment
* <code>cap (production|staging|development) db:fetch_remote_db</code>
** The same as db:dump, except it dumps the database from whichever remote instance you chose
* <code>cap (staging|development) db:push_remote_db</code>
** Same as db:load, except the remote database is overwritten

*Download the production database to use locally*
* <code>cap production db:fetch_remote_db</code>
* <code>cp db/production_data.sql db/development_data.sql</code>
* <code>rake db:load</code>

*Reset the Staging or Development database with Production's version*
* <code>cap production db:fetch_remote_db</code>
* <code>cap staging db:push_remote_db</code>   or   <code>cap development db:push_remote_db</code>

*Update Staging or Development with a copy of your local database*
* <code>rake db:dump</code>
* <code>cap staging db:push_remote_db</code>   or   <code>cap development db:push_remote_db</code>

*Note*: For safety, you can't push a database to production. If you accidentally try, you'll get a message saying you can't do that.

h3. Deployment recipes

There are three custom deployment-oriented cap tasks defined in config/deploy.rb  One works, One sometimes works, and the first one *doesn't!*
* cap deploy:from_scratch does not work. 
** It would need to be able to let users answer questions.
** Instead of dropping the database, we would have to simply drop tables. (rails user does not have perms to drop dbs)
* cap deploy:install_gems does seem to work, unless there are dependancies on the gem being installed.
* cap deploy:shared_symlinks does work, and it links in the shared resources that we use. (like config/database.yml)

Workarounds for cap deploy:from_scratch:  I usually just end up logging in to otto, dropping all the tables, 
and then running the various rake tasks by hand:

<code><pre>
rake db:migrate
rake rigse:setup:default_users_roles
rake rigse:setup:create_additional_users
rake rigse:setup:import_gses_from_file
</pre></code>

We should solve this one sooner rather than later.

h3. Miscellaneous recipes

*Set the gse_key field for existing GradeSpanExpectations*
* <code>cap convert:set_gse_keys</code>

h2. Updating the RITES staging server.

Once the master branch has been deployed to the dev site, tested
and found reliable enough to deploy to staging here's how to do it.

If you don't already have a local branch of staging

<code>
  git branch --track staging origin/staging
</code>

Switch to the staging branch and merge from master

<code><pre>
  git co staging
  git merge master
</pre></code>

Push your copy of the staging branch to the gihub repository:

<code>
  git push origin staging
</code>

Dump the production database to this file <code>db/production_data.sql</code> on the production server.

<code>
  cap production db:remote_db_dump
</code>

Copy the production database to this file <code>db/production_data.sql</code> in your local working directory.

<code>
  cap production db:remote_db_download
</code>

Copy <code>db/production_data.sql</code> in your local directory to the staging server

<code>
  cap staging db:remote_db_upload
</code>

Replace the tables in the production database on the staging server with data here: <code>db/production_data.sql</code>.

<code>
  cap staging db:remote_db_load
</code>

If there are migrations that need to be run

<code>
  cap staging deploy:migrate
</code>

If the ITSI importers have been updated and you want to run them again:

<code><pre>
  cap staging import:erase_and_import_itsi_activities
  cap staging import:erase_and_import_ccp_itsi_units
</pre></code>

Test the staging server: "http://rites-investigations.staging.concord.org/":http://rites-investigations.staging.concord.org/

If the authors confirm that there are no blockers then let people know when the
update will take place and perform these tasks on the production server.
h2. other Rake tasks:

* rigse:make:investigations. This task simply finds all activities with no parent investigation, 
and creates a new investigation for that activity. The created investigation has the same name and description as the activity it contains.

h1. haml

we use haml for some templates
see: http://haml.hamptoncatlin.com/

to install this plugin we followed this procedure:
# <code>gem install --no-ri haml</code> 
# <code>haml --rails path/to/rigse_app</code>

!http://clients.fudgestudios.com/chester.jpg!

h2. Updating the RITES staging server.

h2. notes for collaborating developers

# I could not figure out how to get rspec to work, and I did not feel like installing shoulda, so for now I am using basic unit tests
# This project was derived from BORT, which is basically like an archetype. Other notes in this document are taken from the Bort docs.
# 

h1. Rendering OTML

The sass template rites.otml.sass generates the css file: rites.otml.css which is used for styling the xhtml content in
OTCompoundDoc elements.

The Java OTrunk system uses Java html editor kit for rendering xhtml and implements a very limited version of CSS that is somewhere
between CSS1 and CSS2. You can find out more about this implementations limitations here: "Java 1.5: Class CSS":http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/text/html/CSS.html

h2. TODO Items:

# make models for
## activities (done)
## xhtml text areas [Xhtml]
## Open Responses [OpenResponse]
## Multiple Choice Questions [MultipleChoiceQuestion]
## Datacollectors: sensors and prediction [DataCollector]
## Models [InteractiveModel]

h3. RESTful Authentication

RESTful Authentication is already setup. The routes are setup, along with the mailers and observers.
Forgotten password comes setup, so you don't have to mess around setting it up with every project.

The AASM plugin comes pre-installed. RESTful Authentication is also setup to use user activation.

h3. User Roles

Bort now comes with "Role Requirement":http://code.google.com/p/rolerequirement/ by Tim Harper. A default 
admin role is predefined along with a default admin user. See the migrations for the admin login details.

h3. Open ID Authentication

Bort, as of 0.3, has Open ID integrated with RESTful Authentication. Rejoice!

_However I've (stepheneb) removed this to make debugging the authentication simnpler and it 
seems as though open-id is not becoming widespread._

h3. Will Paginate

We use will_paginate in pretty much every project we use.

h3. Rspec & Rspec-rails

You should be testing your code, so Bort comes with Rspec and Rspec-rails already installed so you're
ready to roll.

h3. Exception Notifier

You don't want your applications to crash and burn so Exception Notifier is already installed to let 
you know when everything goes to shit.

h3. Asset Packager

*RITES Authoring and portal site use this now* 
see "Asset Packager docs":http://synthesis.sbecker.net/pages/asset_packager

cap deploy will trigger the asset_packager to run.
you can also run locally by hand: rake asset:packager:build_all

Assets are configured in config/asset_packages.yml
Packages up your css/javascript so you're not sending 143 files down to the user at the same time. Reduces
load times and saves you bandwidth.

h2. Routes


h2. Settings YAML

There is a settings.yml file that contains site-wide stuff. The site name, url and admin email are all used
in the RESTful Auth mailers, so you don't need to worry about editing them.

h2. Database YAML

The database.yml defaults to sqlite3 but also contains the settings for MySQL in comments so you can switch
over easily.

h2. Capistrano Recipe

Bort comes ready to rock capistrano. The recipe that is setup is based on using git and passenger. It's ready
to go with multistage deployments. It deploys to the production config by default, so if you don't need it
you can ignore it. Just update config/deploy/production.rb with your deployment settings.

More info on capistrano-ext/multistage deployments can be found here: http://weblog.jamisbuck.org/2007/7/23/capistrano-multistage

h2. Uses the Database for Sessions

Bort is setup to use the database to store sessions by default. 

h2. Misc 

* password and password_confirmation are set up to be filtered
* there is a default application layout file
* a page title helper has been added
* index.html is already deleted
* rails.png is already deleted
* a few changes have been made to the default views
* a default css file with blank selectors for common rails elements

h2. Credits

Bort put together by people at "Fudge":http://www.fudgestudios.com/ 
