# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'rubygems'

ENV['RAILS_ENV'] = 'cucumber'
require File.expand_path('../../../spec/spec_helper_common.rb', __FILE__)

require 'cucumber/rails'

require 'cucumber/rails/capybara/javascript_emulation' # Lets you click links with onclick javascript handlers without using @culerity or @javascript
require 'cucumber/rails/capybara/select_dates_and_times'

require 'email_spec'
require 'email_spec/cucumber'

require 'cucumber/formatter/unicode'
require 'cucumber/rspec/doubles'
require 'rspec/expectations'

require 'capybara-screenshot/cucumber'
require_relative 'capybara_initializer'

Capybara::Screenshot.prune_strategy = :keep_last_run
Capybara::Screenshot.register_filename_prefix_formatter(:cucumber) do |scenario|
  "screenshot_#{scenario.title.gsub(' ', '-').gsub(/^.*\/spec\//,'')}"
end

CapybaraInitializer.configure do |config|
  config.headless = ENV.fetch('HEADLESS', true) != 'false'
  config.context = ENV['DOCKER'].present? ? :docker : nil
end

include SolrSpecHelper
solr_setup
clean_solar_index
reindex_all

# so we can use things like dom_id_for
include ApplicationHelper

# share the db connections between the test thread and the server thread to fix MySQL errors in tests
class ActiveRecord::Base
  mattr_accessor :shared_connection
  @@shared_connection = nil

  def self.connection
    @@shared_connection || ConnectionPool::Wrapper.new(:size => 1) { retrieve_connection }
  end
end
ActiveRecord::Base.shared_connection = ActiveRecord::Base.connection

#The above monkeypatch which causes all threads to share the same database connection sometimes causes thread safety related failures. The below monkeypatch attempts to resolve some of those with a mutex. Specifically we were  getting "Mysql2::Error: This connection is in use by..." errors until implementing this fix. This code (and the shared connection code above) can be removed at Rails 5.1 where these issues were solved in Rails & Capybara directly.

module MutexLockedQuerying
  @@semaphore = Mutex.new

  def query(*)
    @@semaphore.synchronize { super }
  end
end

Mysql2::Client.prepend(MutexLockedQuerying)

DatabaseCleaner.strategy = :transaction
Cucumber::Rails::Database.javascript_strategy = :transaction

APP_CONFIG[:theme] = 'xproject' #lots of tests seem to be broken if we try to use another theme

World(RSpec::ActiveModel::Mocks)
World(RSpec::Mocks::ExampleMethods)

# Make visible for testing
ApplicationController.send(:public, :logged_in?, :current_visitor)
