/ %h2 BEGIN: Custom code for ITSI-SU
/ required locals: is_being_edited
- if portal_clazz.is_teacher? current_user
  :javascript
    var show_section = function(element, button) {
      $$('.unit-navigation').each(function(elem) { elem.removeClassName('selected-category'); } );
      $$('.show_section').each(function(elem)    { elem.hide();                      } );
      $(element).show();
      $(button).addClassName('selected-category'); 
    };

    var toggle_info_block = function(link, element_id) {
      var offset = $(link).offset();
      var element = $(element_id)
      var info_block_top = offset.top + 'px';
      var info_block_left = offset.left + 'px';
      if (element.getStyle('display') == 'block') {
        new Effect.Fade(element, { duration:1});
      } else {
        element.setStyle({
                'position': 'absolute',
                'left': '0',
                'top': '10px',
                'width': '250px',
                'z-index': 1000000,
                'box-shadow': '3px 3px 10px #555',
                '-moz-box-shadow': '3px 3px 10px #555',
                '-webkit-box-shadow': '3px 3px 10px #555'
                });
        new Effect.Appear(element, {duration:1, from:1.0, to:1.0});
      }
    };

    var updateOfferingCounter = function(delta) {
      ;
      var counter = $('total-selected');
      var text  = counter.innerText;
      var value = parseInt(text);
      value = value + delta;
      counter.update(value);
    }; 
    
    $(document).updateOfferings = function(input, portal_clazz_id, activity_id, offering_id, runnable_type) {
      // TODO: remove console logging statements
      var ajaxUpdater;
      var new_checked_state = input.checked;
      if(new_checked_state){
        // User wants to make a new offering
        ajaxUpdater = new Ajax.Request('/portal/classes/' + portal_clazz_id + '/add_offering',
          {
            parameters: {
              id: portal_clazz_id,
              runnable_id: activity_id,
              runnable_type: runnable_type
            },
            asynchronous:true, evalScripts:true,
            onCreate: function() {
              updateOfferingCounter(+1);
              $('total-selected').setStyle({opacity: 0.5});
            },
            onFailure: function(transport) {
              updateOfferingCounter(-1);
              $('total-selected').setStyle({opacity: 1});
            }, 
            onSuccess: function(transport) {
              $('total-selected').setStyle({opacity: 1});
              
              // Find all input elements for the same activity and update them all
              $$('input[name="'+input.name+'"]').each(function(inputElement) {
                if(inputElement.value == input.value){
                  inputElement.writeAttribute("checked", true);
                  inputElement.writeAttribute("onclick", "updateOfferings(this, "+portal_clazz_id+", "+activity_id+", "+transport.responseText+", '"+runnable_type+"')");
                }
              });
              // TODO: flash a success message from here
            }
            // TODO: on failure find all input elements for the same activity and update them all (uncheck them)
            // TODO: flash a failure message from here
           }
        );
      } else{
        // User wants to remove an offering
        ajaxUpdater = new Ajax.Updater('flash', 
          '/portal/classes/' + portal_clazz_id + '/remove_offering',
          {
            parameters: {
              id: portal_clazz_id,
              runnable_id: activity_id,
              offering_id: offering_id,
              runnable_type: runnable_type
            },
            asynchronous:true, evalScripts:true,
            onCreate: function() {
              updateOfferingCounter(-1);
              $('total-selected').setStyle({opacity: 0.5});
            },
            onFailure: function(transport) {
              updateOfferingCounter(+1);
              $('total-selected').setStyle({opacity: 1});
            }, 
            onSuccess: function(transport) {
              $('total-selected').setStyle({opacity: 1});
              
              // TODO: find all input elements for the same activity and update them all (uncheck them and set offering id to -1)
              $$('input[name="'+input.name+'"]').each(function(inputElement) {
                if(inputElement.value == input.value){
                  inputElement.writeAttribute("checked", null);
                  inputElement.writeAttribute("onclick", "updateOfferings(this, "+portal_clazz_id+", "+activity_id+", -1, '"+runnable_type+"')");
                }
              });
            }
            // TODO: on failure find all input elements for the same activity and update them all (check them)
          }
        );
      }
      return false;
    };

  -# %form{ :id => 'activity_offers_form', :method=>"post", :action=>"/class/edit/#{portal_clazz.id}/process/"}
  = hidden_field_tag 'portal_clazz_id', :portal_clazz.id
  %h2 
    Activities (total selected:
    %span#total-selected="#{portal_clazz.offerings.size}"
    )
  - bins = Activity.list_bins(current_user)
  %table.activity-chart{ :border =>"0" :cellspacing=>"0" :cellpadding => "0" :width=> "100%"}
    %tr
      %td#activity-chart-navigation{:width => "225"}
        %ul
          - bins.each do |tag|
            -#%li#middleschoolearthscience-control.unit-navigation.level1{:onclick => "show_section('#middleschoolearthscience', this);"}
            %li#middleschoolearthscience-control{:class => tag[:classes], :onclick => "show_section('#{tag[:key]}', this);"}
              ="#{tag[:name]} (#{tag[:count]})"
              %span#middleschoolearthscience-count.navigation-count
      %td#activity-chart-panels
        - bins.each do |tag|
          %div.show_section{:id => tag[:key], :style=>"display: none;"}
            - tag[:units].each do |unit|
              %h2="#{unit[:name]} (#{unit[:count]})"
              - unit[:activities].each do |runnable|
                -#- Activity.published.each do |runnable|
                - offering = portal_clazz.offerings.detect { |o| o.runnable.id == runnable.id }
                - offering_id = offering.nil? ? false : offering.id
                = render :partial => 'portal/offerings/portal_edit', :locals => {:assigned => true, :offering_id => offering_id, :is_being_edited => true, :portal_clazz => portal_clazz, :runnable => runnable}
        %h2
          your activities
        - @current_user.activities.each do |runnable|
          - offering = portal_clazz.offerings.detect { |o| o.runnable.id == runnable.id }
          - offering_id = offering.nil? ? false : offering.id
          = render :partial => 'portal/offerings/portal_edit', :locals => {:assigned => true, :offering_id => offering_id, :is_being_edited => true, :portal_clazz => portal_clazz, :runnable => runnable}
