/ locals: 
/ * top_node, must include module TreeNode
/ * should also be an active record object which has a controller (for links)
/ * should also have a method called.id
/ * should also have a name method and possibly (?) a description method.
/ selects an array of ruby objects, which are somehow 'selected' (in navigation-sense, this means where you are...)
/ everything in the collection must have a name method... (for now), should change that up.
/ TODO: it would be good to provide a means for passing styling blocks.
/ TODO: it would be good to make the nesting recursive instead of fixed in this way.
/ TODO: means to specify sorting method.
#accordion_nav
  - top_container_id = dom_id_for(top_node, :accordion_container_list)
  - top_controller ||= top_node.class.name.tableize
  - sub_controller ||= top_node.children[0] ? top_node.children[0].class.name.tableize : nil
  - max_depth = (defined? depth) ? depth : 3

  - if  sub_controller 
    - top_action ||= "sort_#{sub_controller}"
    - if top_node.children[0].children[0]
      - sub_action ||= "sort_#{top_node.children[0].children[0].class.name.tableize}" 

  %ul{:id=>top_container_id, :class=>"accordion_header"}
    = link_to top_node.name, top_node
    - if top_node.class == Investigation
      =link_to preview_link_for top_node
    - top_node.children.each do |child|
      - depth = 1
      - style = teacher_only?(child) ? "accordion_container teacher_only" : "accordion_container"
      %li{:id=>dom_id_for(child,:accordion_item), :class=>style}
        .accordion_name
          -if (selects.include? child)
            = link_to child.name,child, :class=> 'selected'
          -else
            =link_to child.name, child
        .accordion_toggle
        -sub_container_id = dom_id_for(child, :sub_section_list)
        .accordion_content{:style=>'display: none;'}
          %ul{:id=>sub_container_id}
            - if (child.respond_to? 'children') and (depth < max_depth)
              - depth = 2
              - child.children.each_with_index do |s,i|
                - style = teacher_only?(s) ? "accordion_container teacher_only" : "accordion_container"
                %li{:id => dom_id_for(s, :accordion_item), :class=>style}
                  - if selects.include? s
                    = link_to "#{s.name}",s, :class=> 'selected accordion_section_title '
                  -else
                    =link_to "#{s.name}",s, :class=> 'accordion_section_title'
                  - if (s.respond_to? 'children') && depth < max_depth
                    - depth = 3
                    - if s.children.first
                      - heading = s.children.first.class.name.humanize
                      = s.children.size > 1 ? "#{heading.pluralize}: " : "#{heading}: "
                    -s.children.each_with_index do |p,i|
                      - number = (p.respond_to? :number) ? p.number : i + 1
                      - style = teacher_only?(p) ? "teacher_only numbered" : "numbered"
                      - if selects.include? p
                        = link_to number, "#", :title => "you are here", :class => "#{style} selected"
                      - else
                        = link_to number, p, :title => "go to #{p.name}", :class => style
        - if sub_action
          =sortable_element sub_container_id.to_sym, :url=> {:controller => sub_controller, :action => sub_action, :params => {:list_name=>sub_container_id,:id => child.id }}
    - if top_action
      =sortable_element top_container_id.to_sym, :url=> {:controller=> top_controller, :action => top_action, :params => {:list_name=>top_container_id,:id => top_node.id }}
