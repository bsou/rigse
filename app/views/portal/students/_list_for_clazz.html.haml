- student_list = (students_in_class(portal_clazz.students)).sort { |a,b| (a.user.last_name <=> b.user.last_name) }
/ = accordion_for(portal_clazz, "Students: #{student_list.length}", 'students_container') do

.action_menu
  .action_menu_header_left
    %strong= "Students: #{student_list.length}"    
  .action_menu_header_right
    %ul
    - if portal_clazz.changeable?(current_user)     
      - if (defined? existing_students) && existing_students.size > 0
        %li 
          =label_tag :student_id, 'Add student from another class: '
          =select_tag('student_id', options_for_select(existing_students.map { |s| [s.login,s.id] })) 
      %li= link_to "add new", new_portal_student_path(:clazz_id => portal_clazz.id), :title => "add a student to #{portal_clazz.name}"
.item
  %table{:width=>"100%"}
    %tr
      %th
        Student name
      %th
        Student login
      %th
        action
    - student_list.each do |portal_student|
      - portal_student_clazz = portal_clazz.student_clazzes.find_by_student_id(portal_student.id)
      %tr{:id=>dom_id_for(portal_student_clazz)}
        %td
          = link_to portal_student.user.name, portal_student
        %td
          = portal_student.user.login
        %td
          - if portal_clazz.changeable?(current_user)
            = remote_link_button "delete.png", :url => portal_clazz_student_clazz_url(portal_clazz, portal_student_clazz), :confirm => "This action will remove the student: '#{portal_student.name}' from the class: #{portal_clazz.name}. \nAre you sure you want to do this?", :method => :delete, :title => "remove #{portal_student.name} from #{portal_clazz.name}"
