= render :partial => 'sections/show', :collection => activity.sections, :as => :section

- content_for("activity_#{dom_id_for(activity)}".to_sym) do
  %OTUDLContainer{ :leftPanelWidth => activity.left_nav_panel_width }
    %title
      %OTCompoundDoc
        %bodyText
          #content
            %h3= h(activity.name)
    %menu
      %OTViewChild{ :useScrollPane => 'true', :useHorizontalScrollPane => 'false', :scrollPanelHasBorder => 'false' }
        %object
          %object{ :refid => ot_refid_for(activity, :menu) }/
        %viewid
          %object{ :refid => ot_refid_for('menu_accordion_section_view') }/
    %content
      %OTCardContainer{ :local_id => ot_local_id_for(activity, :section_card_container), :contentsMayScroll => 'false' }
        %cards
          - activity.sections.each do |section|
            - unless ((section.teacher_only?) && (!teacher_mode))
              =yield "section_#{dom_id_for(section)}".to_sym
        %currentCard
          - if activity.sections.first
            %object{ :refid => ot_refid_for(activity.sections.first) }/
        %viewedCards

- content_for(:library) do
  %OTMenu{ :local_id => ot_local_id_for(activity, :menu) }
    %cardContainer
      %object{ :refid => ot_refid_for(activity, :section_card_container) }
    %menuRule
      %object{ :refid => ot_refid_for('section_rule') }

  %OTMenuRule{ :local_id => ot_local_id_for('section_rule'), :jumpToAnyCard => 'true' }
